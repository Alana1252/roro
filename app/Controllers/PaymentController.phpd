<?php

namespace App\Controllers;

use App\Controllers\BaseController;
use Midtrans\Config;
use Midtrans\Snap;
use App\Models\TransactionModel;
use App\Services\MidtransApi;

class PaymentController extends BaseController
{
    public function index()
    {
        // Set your Merchant Server Key
        Config::$serverKey = 'SB-Mid-server-3hL5upG4ONsCghSB1dlFe2H3';
        // Set to Development/Sandbox Environment (default). Set to true for Production Environment (accept real transaction).
        Config::$isProduction = false;
        // Set sanitization on (default)
        Config::$isSanitized = true;
        // Set 3DS transaction for credit card to true
        Config::$is3ds = true;

        $params = [
            'transaction_details' => [
                'order_id' => rand(),
                'gross_amount' => 10000,
            ],
        ];

        $data = [
            'snapToken' => Snap::getSnapToken($params),
        ];

        return view('tiket/payment', $data);
    }
    
    public function handlePaymentResult()
    {
        // Mengambil data hasil pembayaran dari POST request
        $result = json_decode($this->request->getBody(), true);
    
        // Mengecek apakah kunci 'status_code' ada dalam $result
        if (isset($result['order_id'])) {
            // Model dan proses penyimpanan ke tabel transaksi
            $transactionModel = new TransactionModel();
            $transactionModel->insert($result);
    
            // Tambahkan log atau notifikasi lainnya sesuai kebutuhan Anda
    
            return view('pages/payment_result', ['result' => $result]);
        } else {
            // Tampilkan pesan error jika kunci 'status_code' tidak ditemukan
            return "Error: Invalid payment result data";
        }
        
    }
    public function recallCardPayment($transactionId)
    {
        $transactionModel = new TransactionModel();
        $transaction = $transactionModel->find($transactionId);

        if (!$transaction) {
            // Handle jika transaksi tidak ditemukan
            // Misalnya, tampilkan pesan error atau lakukan langkah lain yang sesuai
            return redirect()->back()->with('error', 'Transaksi tidak ditemukan.');
        }

        // Lakukan langkah-langkah pemanggilan kembali pembayaran sesuai dengan logika bisnis Anda

        // Contoh: Tampilkan pesan sukses
        return redirect()->back()->with('success', 'Pemanggilan kembali pembayaran berhasil.');
    }
}
